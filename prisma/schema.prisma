// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Product {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  price         Float
  stock         Int
  imageUrl      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt

  cartItems   CartItem[] 
  
}

model Cart {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique @db.ObjectId  
  items         CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int      @default(1)
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts     Cart[]
  orders    Order[]   // âœ… Add this line
}

model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus  @default(PENDING)
  paymentId   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @db.ObjectId   

  productId   String   @db.ObjectId
  name        String
  price       Float
  quantity    Int
  imageUrl    String?
}


enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}